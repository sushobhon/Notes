---
title: "Agentic AI"
from: markdown+emoji
description: "Introduction"
author:
  - name: Sushobhon Karmakar 
date: 08-15-2025
categories: [Agentic AI, Gen AI]
# image: "llm-model.png"
draft: False
execute:
  eval: false  # This is the key line
  echo: true   # This ensures the code blocks are still displayed
---

## Why Agents?
Large Language Model (**LLM**s) are powerful at generating text and answering questions, but they are fundamentally *reactive* - they respond only when prompted and have no memory, goals, or ability to take actions on their own. Agentic AI builds on LLMs by giving them the capability to reason over multiple steps, maintain context, make decisions, and interact with external tools or environments autonomously.

For example, while a standard LLM can tell you today's weather *if you provide the data*, an AI agent can **decide** to featch live weather information from an API, compare it with past data, and then suggest the best day for your picnic - all without further prompting.

This note provides a hands-on jurney into Agentic AI, blending concepts with real coding examples to show how agency transforms an LLM into an active problem-solver.

## What is Agent?

Think of a normal LLM (like `GPT-4`, `LLaMA`, `Mistral`) as **a very smart person who only answers your questions from memory**.

An **Agentic AI** is like that smart person **with internet, a calculator, an Excel sheet, and the ability to run code, look things up, and decide what to do next**.

**Agentic AI adds:**

1. **Autonomy →** Can decide *what* steps to take without you telling every detail.
2. **Tools →** Can call functions/APIs (e.g., search the web, run Python, query databases).
3. **Memory →** Can remember what happened before and use that knowledge later.
4. **Planning →** Can break down big goals into small steps.

### Key Parts of an Agent
An Agent usully has:

  1. **LLM →** Brain for reasoning and planning.
  2. **Tools →** Functions it can call to act in the real world
  3. **Memory →** So it doesn’t forget past actions.
  4. **Loop →** Keeps running until the task is complete